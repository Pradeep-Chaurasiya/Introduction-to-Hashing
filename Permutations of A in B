public class Solution {
    public int solve(String A, String B) {
        
        int n = A.length();
        int m = B.length();
        int count = 0;
        
        HashMap<Character, Integer> mapA = new HashMap<>();
        for(int i=0; i<n; i++){
            mapA.put(A.charAt(i), mapA.getOrDefault(A.charAt(i), 0)+1);
        }
        
        HashMap<Character, Integer> mapB = new HashMap<>();
        for(int i=0; i<n; i++){
            mapB.put(B.charAt(i), mapB.getOrDefault(B.charAt(i), 0)+1);
        }
        
        if(mapA.equals(mapB)) count++;
        
        for(int i=n, j=0; i<m; i++,j++){
            mapB.put(B.charAt(j), mapB.get(B.charAt(j))-1);
            if(mapB.get(B.charAt(j)) == 0) mapB.remove(B.charAt(j));
            
            mapB.put(B.charAt(i), mapB.getOrDefault(B.charAt(i), 0)+1);
            if(mapA.equals(mapB)) count++;
        }
        return count;
        
        // int n = A.length();
        // int m = B.length();
        // char arrA[] = A.toCharArray();
        // Arrays.sort(arrA);
        // String sA = new String(arrA);
        
        // int count = 0;
        // for(int i=0; i<=m-n; i++){
        //   String sub = B.substring(i, i+n);
           
        //     char arrB[] = sub.toCharArray();
        //     Arrays.sort(arrB);
        //     String sB = new String(arrB);
        //   if(sA.equals(sB)) count++;
        // }
        // return count;
    }
}
